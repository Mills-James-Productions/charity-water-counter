{"version":3,"sources":["pages/led.js","pages/site.js","App.js","reportWebVitals.js","index.js"],"names":["LED","data","className","parsedData","formattingFn","value","Intl","NumberFormat","style","currency","minimumFractionDigits","format","prefix","duration","end","pledge_amount","preserveValue","toLocaleString","people_served","Site","App","useState","listening","setListening","setData","useEffect","EventSource","onmessage","e","console","log","JSON","parse","exact","path","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAgDeA,G,YA5CH,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACb,OACE,qBAAKC,UAAU,WAAf,SACGD,EAAKE,WACJ,qBAAKD,UAAU,WAAf,SACE,sBAAKA,UAAU,sBAAf,UACE,6BACE,cAAC,IAAD,CACEE,aAAc,SAACC,GAAD,OACZC,KAAKC,aAAa,QAAS,CACzBC,MAAO,WACPC,SAAU,MACVC,sBAAuB,IACtBC,OAAON,IAEZO,OAAO,KACPC,SAAU,EACVC,IAAKb,EAAKE,WAAWY,cACrBC,eAAe,MAGnB,sBAAMd,UAAU,kBAAhB,qBAEA,6BACE,cAAC,IAAD,CACEE,aAAc,SAACC,GAAD,OAAWA,EAAMY,eAAe,OAC9CL,OAAO,KACPC,SAAU,EACVC,IAAKb,EAAKE,WAAWe,cACrBF,eAAe,MAGnB,sBAAMd,UAAU,kBAAhB,iCAIJ,4CCSOiB,G,MA5CF,SAAC,GAAc,IAAZlB,EAAW,EAAXA,KACd,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAKE,WACJ,qBAAKD,UAAU,YAAf,SACE,sBAAKA,UAAU,uBAAf,UACE,6BACE,cAAC,IAAD,CACEE,aAAc,SAACC,GAAD,OACZC,KAAKC,aAAa,QAAS,CACzBC,MAAO,WACPC,SAAU,MACVC,sBAAuB,IACtBC,OAAON,IAEZO,OAAO,KACPC,SAAU,EACVC,IAAKb,EAAKE,WAAWY,cACrBC,eAAe,MAGnB,sBAAMd,UAAU,mBAAhB,qBAEA,6BACE,cAAC,IAAD,CACEE,aAAc,SAACC,GAAD,OAAWA,EAAMY,eAAe,OAC9CL,OAAO,KACPC,SAAU,EACVC,IAAKb,EAAKE,WAAWe,cACrBF,eAAe,MAGnB,sBAAMd,UAAU,mBAAhB,iCAIJ,4CCWOkB,MA7Cf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEWF,mBAAS,IAFpB,mBAENpB,EAFM,KAEAuB,EAFA,KAuBb,OAjBAC,qBAAU,WACHH,IACY,IAAII,YAAY,gCAExBC,UAAY,SAACC,GAClBC,QAAQC,IAAIF,EAAE3B,MACd,IAAME,EAAa4B,KAAKC,MAAMJ,EAAE3B,MAEhCuB,GAAQ,SAACvB,GAAD,MAAW,CACjBE,iBAEF0B,QAAQC,IAAI3B,IAEdoB,GAAa,MAEd,CAACtB,IAGF,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,IAAlB,SACE,gCACE,gDACA,cAAC,IAAD,CAAMC,GAAI,QAAV,uBACA,uBACA,cAAC,IAAD,CAAMA,GAAI,OAAV,2BAGJ,cAAC,IAAD,CAAOD,KAAK,OAAZ,SACE,cAAC,EAAD,CAAKjC,KAAMA,MAEb,cAAC,IAAD,CAAOiC,KAAK,QAAZ,SACE,cAAC,EAAD,CAAMjC,KAAMA,YCjCPmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c3833546.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CountUp from \"react-countup\";\nimport \"./led.css\";\nconst LED = ({ data }) => {\n  return (\n    <div className=\"led-wrap\">\n      {data.parsedData ? (\n        <div className=\"led-data\">\n          <div className=\"led-data--inner-box\">\n            <h2>\n              <CountUp\n                formattingFn={(value) =>\n                  Intl.NumberFormat(\"en-US\", {\n                    style: \"currency\",\n                    currency: \"USD\",\n                    minimumFractionDigits: 0,\n                  }).format(value)\n                }\n                prefix=\"$ \"\n                duration={2}\n                end={data.parsedData.pledge_amount}\n                preserveValue={true}\n              />\n            </h2>\n            <span className=\"led-data--label\">RAISED </span>\n\n            <h2>\n              <CountUp\n                formattingFn={(value) => value.toLocaleString(\"en\")}\n                prefix=\"$ \"\n                duration={2}\n                end={data.parsedData.people_served}\n                preserveValue={true}\n              />\n            </h2>\n            <span className=\"led-data--label\">PEOPLE SERVED </span>\n          </div>\n        </div>\n      ) : (\n        <p>No Data</p>\n      )}\n    </div>\n  );\n};\n\nLED.propTypes = {};\n\nexport default LED;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CountUp from \"react-countup\";\nimport \"./site.css\";\n\nconst Site = ({ data }) => {\n  return (\n    <div className=\"site-wrap\">\n      {data.parsedData ? (\n        <div className=\"site-data\">\n          <div className=\"site-data--inner-box\">\n            <h2>\n              <CountUp\n                formattingFn={(value) =>\n                  Intl.NumberFormat(\"en-US\", {\n                    style: \"currency\",\n                    currency: \"USD\",\n                    minimumFractionDigits: 0,\n                  }).format(value)\n                }\n                prefix=\"$ \"\n                duration={2}\n                end={data.parsedData.pledge_amount}\n                preserveValue={true}\n              />\n            </h2>\n            <span className=\"site-data--label\">RAISED </span>\n\n            <h2>\n              <CountUp\n                formattingFn={(value) => value.toLocaleString(\"en\")}\n                prefix=\"$ \"\n                duration={2}\n                end={data.parsedData.people_served}\n                preserveValue={true}\n              />\n            </h2>\n            <span className=\"site-data--label\">PEOPLE SERVED </span>\n          </div>\n        </div>\n      ) : (\n        <p>No Data</p>\n      )}\n    </div>\n  );\n};\n\nSite.propTypes = {};\n\nexport default Site;\n","import { useEffect, useState, Fragment } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport CountUp from \"react-countup\";\nimport \"./App.css\";\n\nimport LED from \"./pages/led\";\nimport Site from \"./pages/site\";\nfunction App() {\n  const [listening, setListening] = useState(false);\n  const [data, setData] = useState({});\n\n  //for the count up function\n\n  useEffect(() => {\n    if (!listening) {\n      const events = new EventSource(\"http://localhost:5000/events\");\n\n      events.onmessage = (e) => {\n        console.log(e.data);\n        const parsedData = JSON.parse(e.data);\n\n        setData((data) => ({\n          parsedData,\n        }));\n        console.log(parsedData);\n      };\n      setListening(true);\n    }\n  }, [data]);\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <div>\n            <h1> Go Somewhere!</h1>\n            <Link to={\"/site\"}>Site Link</Link>\n            <br />\n            <Link to={\"/led\"}>LED Link</Link>\n          </div>\n        </Route>\n        <Route path=\"/led\">\n          <LED data={data} />\n        </Route>\n        <Route path=\"/site\">\n          <Site data={data} />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}